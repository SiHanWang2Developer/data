{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "““坚果改造笔画cuda_error”的副本”的副本",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SiHanWang2Developer/data/blob/master/%E6%88%90%E5%8A%9F%E8%BE%93%E5%87%BA%E6%AF%8F%E4%B8%AA%E7%AC%94%E7%94%BB\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "-UPaAdWoVgJx",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QHnVupBBn9eR",
        "colab_type": "text"
      },
      "source": [
        "# [How to train Detectron2 with Custom COCO Datasets](https://www.dlology.com/blog/how-to-train-detectron2-with-custom-coco-datasets/) | DLology\n",
        "\n",
        "<img src=\"https://dl.fbaipublicfiles.com/detectron2/Detectron2-Logo-Horz.png\" width=\"500\">\n",
        "\n",
        "This notebook will help you get started with this framwork by training a instance segmentation model with your custom COCO datasets."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2bVqmEoGK4jf",
        "colab_type": "text"
      },
      "source": [
        "本文参考https://colab.research.google.com/drive/16jcaJoc6bCFAQ96jDe2HwtXj7BMD_-m5"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jVDC4G20IuIm",
        "colab_type": "code",
        "outputId": "9b9d1ceb-328f-4590-cf36-fa11f2881115",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 316
        }
      },
      "source": [
        "!/opt/bin/nvidia-smi"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fri Apr 10 09:49:13 2020       \n",
            "+-----------------------------------------------------------------------------+\n",
            "| NVIDIA-SMI 418.67       Driver Version: 418.67       CUDA Version: 10.1     |\n",
            "|-------------------------------+----------------------+----------------------+\n",
            "| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n",
            "| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n",
            "|===============================+======================+======================|\n",
            "|   0  Tesla K80           Off  | 00000000:00:04.0 Off |                    0 |\n",
            "| N/A   57C    P0    62W / 149W |   3632MiB / 11441MiB |      0%      Default |\n",
            "+-------------------------------+----------------------+----------------------+\n",
            "                                                                               \n",
            "+-----------------------------------------------------------------------------+\n",
            "| Processes:                                                       GPU Memory |\n",
            "|  GPU       PID   Type   Process name                             Usage      |\n",
            "|=============================================================================|\n",
            "+-----------------------------------------------------------------------------+\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vM54r6jlKTII",
        "colab_type": "text"
      },
      "source": [
        "# Install detectron2"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9_FzH13EjseR",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "outputId": "291391d5-8f6d-4134-898b-6b1ccd061d19"
      },
      "source": [
        "!pip install -U torch torchvision\n",
        "!pip install git+https://github.com/facebookresearch/fvcore.git\n",
        "import torch, torchvision\n",
        "torch.__version__"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already up-to-date: torch in /usr/local/lib/python3.6/dist-packages (1.4.0)\n",
            "Requirement already up-to-date: torchvision in /usr/local/lib/python3.6/dist-packages (0.5.0)\n",
            "Requirement already satisfied, skipping upgrade: pillow>=4.1.1 in /usr/local/lib/python3.6/dist-packages (from torchvision) (7.0.0)\n",
            "Requirement already satisfied, skipping upgrade: numpy in /usr/local/lib/python3.6/dist-packages (from torchvision) (1.18.2)\n",
            "Requirement already satisfied, skipping upgrade: six in /usr/local/lib/python3.6/dist-packages (from torchvision) (1.12.0)\n",
            "Collecting git+https://github.com/facebookresearch/fvcore.git\n",
            "  Cloning https://github.com/facebookresearch/fvcore.git to /tmp/pip-req-build-pz66wuxt\n",
            "  Running command git clone -q https://github.com/facebookresearch/fvcore.git /tmp/pip-req-build-pz66wuxt\n",
            "Requirement already satisfied (use --upgrade to upgrade): fvcore==0.1 from git+https://github.com/facebookresearch/fvcore.git in /usr/local/lib/python3.6/dist-packages\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from fvcore==0.1) (1.18.2)\n",
            "Requirement already satisfied: yacs>=0.1.6 in /usr/local/lib/python3.6/dist-packages (from fvcore==0.1) (0.1.6)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.6/dist-packages (from fvcore==0.1) (5.3.1)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.6/dist-packages (from fvcore==0.1) (4.38.0)\n",
            "Requirement already satisfied: portalocker in /usr/local/lib/python3.6/dist-packages (from fvcore==0.1) (1.6.0)\n",
            "Requirement already satisfied: termcolor>=1.1 in /usr/local/lib/python3.6/dist-packages (from fvcore==0.1) (1.1.0)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.6/dist-packages (from fvcore==0.1) (7.0.0)\n",
            "Requirement already satisfied: tabulate in /usr/local/lib/python3.6/dist-packages (from fvcore==0.1) (0.8.7)\n",
            "Building wheels for collected packages: fvcore\n",
            "  Building wheel for fvcore (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for fvcore: filename=fvcore-0.1-cp36-none-any.whl size=42662 sha256=30bd5ababf484cd1efb02b3cfb83ac9c268e966795c42c3704ce68a75b4240a1\n",
            "  Stored in directory: /tmp/pip-ephem-wheel-cache-qb12imrc/wheels/48/53/79/3c6485543a4455a0006f5db590ab9957622b6227011941de06\n",
            "Successfully built fvcore\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'1.4.0'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GeejixTmwEmI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# install detectron2:\n",
        "!pip install detectron2 -f https://dl.fbaipublicfiles.com/detectron2/wheels/cu100/index.html\n",
        "# clone the repo to access PointRend code. Use the same version as the installed detectron2\n",
        "!git clone --branch v0.1.1 https://github.com/facebookresearch/detectron2 detectron2_repo"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZyAvNCJMmvFF",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# You may need to restart your runtime prior to this, to let your installation take effect\n",
        "# Some basic setup\n",
        "# Setup detectron2 logger\n",
        "import detectron2\n",
        "from detectron2.utils.logger import setup_logger\n",
        "setup_logger()\n",
        "\n",
        "# import some common libraries\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import cv2\n",
        "from google.colab.patches import cv2_imshow\n",
        "\n",
        "# import some common detectron2 utilities\n",
        "from detectron2 import model_zoo\n",
        "from detectron2.engine import DefaultPredictor\n",
        "from detectron2.config import get_cfg\n",
        "from detectron2.utils.visualizer import Visualizer\n",
        "from detectron2.data import MetadataCatalog, DatasetCatalog\n",
        "\n",
        "# import PointRend project\n",
        "import sys; sys.path.insert(1, \"detectron2_repo/projects/PointRend\")\n",
        "from detectron2_repo.projects.PointRend import point_rend"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b2bjrfb2LDeo",
        "colab_type": "text"
      },
      "source": [
        "# Train on a custom COCO dataset"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tjbUIhSxUdm_",
        "colab_type": "text"
      },
      "source": [
        "In this section, we show how to train an existing detectron2 model on a custom dataset in a new format.\n",
        "\n",
        "We use [the fruits nuts segmentation dataset](https://github.com/Tony607/mmdetection_instance_segmentation_demo)\n",
        "which only has 3 classes: data, fig, and hazelnut.\n",
        "We'll train a segmentation model from an existing model pre-trained on the COCO dataset, available in detectron2's model zoo.\n",
        "\n",
        "Note that the COCO dataset does not have the \"data\", \"fig\" and \"hazelnut\" categories."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7RhkndJ6JWqO",
        "colab_type": "code",
        "outputId": "0eb930ba-ec0c-440b-c8f5-9afac43f0ef0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        }
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4Qg7zSVOulkb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# # download, decompress the data\n",
        "# !wget https://github.com/Tony607/detectron2_instance_segmentation_demo/releases/download/V0.1/data.zip\n",
        "# !unzip data.zip > /dev/null"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tVJoOm6LVJwW",
        "colab_type": "text"
      },
      "source": [
        "Register the fruits_nuts dataset to detectron2, following the [detectron2 custom dataset tutorial](https://detectron2.readthedocs.io/tutorials/datasets.html).\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lnkg1PByUjGQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# from detectron2.data.datasets import register_coco_instances\n",
        "# register_coco_instances(\"fruits_nuts\", {}, \"./data/trainval.json\", \"./data/images\")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MWknKqWTWIw9",
        "colab_type": "code",
        "outputId": "2f5a878f-6c4a-46a5-c7b8-1b6dc36f32d7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        }
      },
      "source": [
        "# fruits_nuts_metadata = MetadataCatalog.get(\"fruits_nuts\")\n",
        "# dataset_dicts = DatasetCatalog.get(\"fruits_nuts\")"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[32m[03/26 02:56:00 d2.data.datasets.coco]: \u001b[0mLoaded 18 images in COCO format from ./data/trainval.json\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xI-aG4sj3cV2",
        "colab_type": "text"
      },
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "下面 笔画数据集\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Retbdmc07rgd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from detectron2.data.datasets import register_coco_instances\n",
        "register_coco_instances(\"wz\", {}, \"./drive/My Drive/pic566_28class/images566.json\", \"./drive/My Drive/pic566_28class/images\")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ttCvanr27rPN",
        "colab_type": "code",
        "outputId": "23e5445a-b115-4feb-9c61-2e237b91c82c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        }
      },
      "source": [
        "wanzheng_metadata = MetadataCatalog.get(\"wz\")\n",
        "wanzhengdataset_dicts = DatasetCatalog.get(\"wz\")"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[32m[04/10 09:52:43 d2.data.datasets.coco]: \u001b[0mLoaded 566 images in COCO format from ./drive/My Drive/pic566_28class/images566.json\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6ljbWTX0Wi8E",
        "colab_type": "text"
      },
      "source": [
        "To verify the data loading is correct, let's visualize the annotations of randomly selected samples in the training set:\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q38FZu0W37T4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# #坚果数据集\n",
        "# import random\n",
        "\n",
        "# for d in random.sample(dataset_dicts, 1):\n",
        "#    img = cv2.imread(d[\"file_name\"])#!!!!!!!!!!!!!!!!!！！！！！！！！！！！\n",
        "#    visualizer = Visualizer(img[:, :, ::-1], metadata=fruits_nuts_metadata, scale=0.5)\n",
        "#    vis = visualizer.draw_dataset_dict(d)\n",
        "#    cv2_imshow(vis.get_image()[:, :, ::-1])\n",
        "#    cv2_imshow(img)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F5JPh6Ur8FTD",
        "colab_type": "code",
        "outputId": "20692392-eb97-4bf9-cd92-62cb3bdb2ea7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 145
        }
      },
      "source": [
        "#笔画数据集\n",
        "import random\n",
        "for d in random.sample(wanzhengdataset_dicts, 1):\n",
        "    img = cv2.imread(d[\"file_name\"])\n",
        "    visualizer = Visualizer(img[:, :, ::-1], metadata=wanzheng_metadata, scale=0.5)\n",
        "    vis = visualizer.draw_dataset_dict(d)\n",
        "    cv2_imshow(vis.get_image()[:, :, ::-1])"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n9p7k4IohAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=128x128 at 0x7F911D6A50F0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wlqXIXXhW8dA",
        "colab_type": "text"
      },
      "source": [
        "Now, let's fine-tune a coco-pretrained R50-FPN Mask R-CNN model on the fruits_nuts dataset. It takes ~6 minutes to train 300 iterations on Colab's K80 GPU.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7unkuuiqLdqd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# from detectron2.engine import DefaultTrainer\n",
        "# from detectron2.config import get_cfg\n",
        "# import os\n",
        "\n",
        "# cfg = get_cfg()\n",
        "# cfg.merge_from_file(\"./detectron2_repo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml\")\n",
        "# cfg.DATASETS.TRAIN = (\"fruits_nuts\",)\n",
        "# cfg.DATASETS.TEST = ()   # no metrics implemented for this dataset\n",
        "# cfg.DATALOADER.NUM_WORKERS = 2\n",
        "# cfg.MODEL.WEIGHTS = \"detectron2://COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl\"  # initialize from model zoo\n",
        "# cfg.SOLVER.IMS_PER_BATCH = 2\n",
        "# cfg.SOLVER.BASE_LR = 0.02\n",
        "# cfg.SOLVER.MAX_ITER = 300    # 300 iterations seems good enough, but you can certainly train longer\n",
        "# cfg.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = 128   # faster, and good enough for this toy dataset\n",
        "# cfg.MODEL.ROI_HEADS.NUM_CLASSES = 3  # 3 classes (data, fig, hazelnut)\n",
        "\n",
        "# os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)\n",
        "# trainer = DefaultTrainer(cfg)\n",
        "# trainer.resume_or_load(resume=False)\n",
        "# trainer.train()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nEuB2wY_8kCv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from detectron2.engine import DefaultTrainer\n",
        "from detectron2.config import get_cfg\n",
        "import os\n",
        "\n",
        "cfg = get_cfg()\n",
        "\n",
        "# Add PointRend-specific config\n",
        "point_rend.add_pointrend_config(cfg)\n",
        "cfg.MODEL.POINT_HEAD.NUM_CLASSES = 28#修改POINT_HEAD.NUM_CLASSES为28 默认值为80\n",
        "\n",
        "# cfg.merge_from_file(\"./drive/My Drive/Colab Notebooks/detectron2_repo/configs/COCO-InstanceSegmentation/Base-PointRend-RCNN-FPN.yaml\")\n",
        "cfg.merge_from_file(\"./drive/My Drive/Colab Notebooks/detectron2_repo/projects/PointRend/configs/InstanceSegmentation/pointrend_rcnn_R_50_FPN_3x_coco.yaml\")\n",
        "cfg.DATASETS.TRAIN = (\"wz\",)\n",
        "cfg.DATASETS.TEST = ()   # no metrics implemented for this dataset\n",
        "cfg.DATALOADER.NUM_WORKERS = 2\n",
        "\n",
        "# cfg.MODEL.WEIGHTS = \"detectron2://COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl\"  # initialize from model zoo\n",
        "cfg.MODEL.WEIGHTS = \"https://dl.fbaipublicfiles.com/detectron2/PointRend/InstanceSegmentation/pointrend_rcnn_R_50_FPN_3x_coco/164955410/model_final_3c3198.pkl\"\n",
        "\n",
        "cfg.SOLVER.IMS_PER_BATCH = 2\n",
        "cfg.SOLVER.BASE_LR = 0.02\n",
        "cfg.SOLVER.MAX_ITER = 800    # 300 iterations seems good enough, but you can certainly train longer\n",
        "cfg.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE =256   # faster, and good enough for this toy dataset\n",
        "cfg.MODEL.ROI_HEADS.NUM_CLASSES = 28  # 28 classes (heng,shu....)\n",
        "# assert cfg.MODEL.ROI_HEADS.NUM_CLASSES == cfg.MODEL.POINT_HEAD.NUM_CLASSES\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pVtTbR_A-WBq",
        "colab_type": "code",
        "outputId": "41bcc4cd-61d1-499e-a266-82013ab33102",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "#正式训练\n",
        "os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)\n",
        "trainer = DefaultTrainer(cfg)\n",
        "trainer.resume_or_load(resume=False)\n",
        "trainer.train()"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[32m[04/10 09:58:06 d2.engine.defaults]: \u001b[0mModel:\n",
            "GeneralizedRCNN(\n",
            "  (backbone): FPN(\n",
            "    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n",
            "    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
            "    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))\n",
            "    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
            "    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
            "    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
            "    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))\n",
            "    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
            "    (top_block): LastLevelMaxPool()\n",
            "    (bottom_up): ResNet(\n",
            "      (stem): BasicStem(\n",
            "        (conv1): Conv2d(\n",
            "          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)\n",
            "        )\n",
            "      )\n",
            "      (res2): Sequential(\n",
            "        (0): BottleneckBlock(\n",
            "          (shortcut): Conv2d(\n",
            "            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "          )\n",
            "          (conv1): Conv2d(\n",
            "            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)\n",
            "          )\n",
            "          (conv2): Conv2d(\n",
            "            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)\n",
            "          )\n",
            "          (conv3): Conv2d(\n",
            "            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "          )\n",
            "        )\n",
            "        (1): BottleneckBlock(\n",
            "          (conv1): Conv2d(\n",
            "            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)\n",
            "          )\n",
            "          (conv2): Conv2d(\n",
            "            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)\n",
            "          )\n",
            "          (conv3): Conv2d(\n",
            "            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "          )\n",
            "        )\n",
            "        (2): BottleneckBlock(\n",
            "          (conv1): Conv2d(\n",
            "            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)\n",
            "          )\n",
            "          (conv2): Conv2d(\n",
            "            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)\n",
            "          )\n",
            "          (conv3): Conv2d(\n",
            "            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "          )\n",
            "        )\n",
            "      )\n",
            "      (res3): Sequential(\n",
            "        (0): BottleneckBlock(\n",
            "          (shortcut): Conv2d(\n",
            "            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "          )\n",
            "          (conv1): Conv2d(\n",
            "            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)\n",
            "          )\n",
            "          (conv2): Conv2d(\n",
            "            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)\n",
            "          )\n",
            "          (conv3): Conv2d(\n",
            "            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "          )\n",
            "        )\n",
            "        (1): BottleneckBlock(\n",
            "          (conv1): Conv2d(\n",
            "            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)\n",
            "          )\n",
            "          (conv2): Conv2d(\n",
            "            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)\n",
            "          )\n",
            "          (conv3): Conv2d(\n",
            "            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "          )\n",
            "        )\n",
            "        (2): BottleneckBlock(\n",
            "          (conv1): Conv2d(\n",
            "            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)\n",
            "          )\n",
            "          (conv2): Conv2d(\n",
            "            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)\n",
            "          )\n",
            "          (conv3): Conv2d(\n",
            "            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "          )\n",
            "        )\n",
            "        (3): BottleneckBlock(\n",
            "          (conv1): Conv2d(\n",
            "            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)\n",
            "          )\n",
            "          (conv2): Conv2d(\n",
            "            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)\n",
            "          )\n",
            "          (conv3): Conv2d(\n",
            "            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "          )\n",
            "        )\n",
            "      )\n",
            "      (res4): Sequential(\n",
            "        (0): BottleneckBlock(\n",
            "          (shortcut): Conv2d(\n",
            "            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)\n",
            "          )\n",
            "          (conv1): Conv2d(\n",
            "            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "          )\n",
            "          (conv2): Conv2d(\n",
            "            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "          )\n",
            "          (conv3): Conv2d(\n",
            "            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)\n",
            "          )\n",
            "        )\n",
            "        (1): BottleneckBlock(\n",
            "          (conv1): Conv2d(\n",
            "            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "          )\n",
            "          (conv2): Conv2d(\n",
            "            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "          )\n",
            "          (conv3): Conv2d(\n",
            "            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)\n",
            "          )\n",
            "        )\n",
            "        (2): BottleneckBlock(\n",
            "          (conv1): Conv2d(\n",
            "            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "          )\n",
            "          (conv2): Conv2d(\n",
            "            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "          )\n",
            "          (conv3): Conv2d(\n",
            "            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)\n",
            "          )\n",
            "        )\n",
            "        (3): BottleneckBlock(\n",
            "          (conv1): Conv2d(\n",
            "            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "          )\n",
            "          (conv2): Conv2d(\n",
            "            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "          )\n",
            "          (conv3): Conv2d(\n",
            "            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)\n",
            "          )\n",
            "        )\n",
            "        (4): BottleneckBlock(\n",
            "          (conv1): Conv2d(\n",
            "            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "          )\n",
            "          (conv2): Conv2d(\n",
            "            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "          )\n",
            "          (conv3): Conv2d(\n",
            "            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)\n",
            "          )\n",
            "        )\n",
            "        (5): BottleneckBlock(\n",
            "          (conv1): Conv2d(\n",
            "            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "          )\n",
            "          (conv2): Conv2d(\n",
            "            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "          )\n",
            "          (conv3): Conv2d(\n",
            "            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)\n",
            "          )\n",
            "        )\n",
            "      )\n",
            "      (res5): Sequential(\n",
            "        (0): BottleneckBlock(\n",
            "          (shortcut): Conv2d(\n",
            "            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)\n",
            "          )\n",
            "          (conv1): Conv2d(\n",
            "            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "          )\n",
            "          (conv2): Conv2d(\n",
            "            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "          )\n",
            "          (conv3): Conv2d(\n",
            "            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)\n",
            "          )\n",
            "        )\n",
            "        (1): BottleneckBlock(\n",
            "          (conv1): Conv2d(\n",
            "            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "          )\n",
            "          (conv2): Conv2d(\n",
            "            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "          )\n",
            "          (conv3): Conv2d(\n",
            "            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)\n",
            "          )\n",
            "        )\n",
            "        (2): BottleneckBlock(\n",
            "          (conv1): Conv2d(\n",
            "            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "          )\n",
            "          (conv2): Conv2d(\n",
            "            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "          )\n",
            "          (conv3): Conv2d(\n",
            "            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)\n",
            "          )\n",
            "        )\n",
            "      )\n",
            "    )\n",
            "  )\n",
            "  (proposal_generator): RPN(\n",
            "    (anchor_generator): DefaultAnchorGenerator(\n",
            "      (cell_anchors): BufferList()\n",
            "    )\n",
            "    (rpn_head): StandardRPNHead(\n",
            "      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
            "      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))\n",
            "      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))\n",
            "    )\n",
            "  )\n",
            "  (roi_heads): PointRendROIHeads(\n",
            "    (box_pooler): ROIPooler(\n",
            "      (level_poolers): ModuleList(\n",
            "        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)\n",
            "        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)\n",
            "        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)\n",
            "        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)\n",
            "      )\n",
            "    )\n",
            "    (box_head): FastRCNNConvFCHead(\n",
            "      (fc1): Linear(in_features=12544, out_features=1024, bias=True)\n",
            "      (fc2): Linear(in_features=1024, out_features=1024, bias=True)\n",
            "    )\n",
            "    (box_predictor): FastRCNNOutputLayers(\n",
            "      (cls_score): Linear(in_features=1024, out_features=29, bias=True)\n",
            "      (bbox_pred): Linear(in_features=1024, out_features=112, bias=True)\n",
            "    )\n",
            "    (mask_coarse_head): CoarseMaskHead(\n",
            "      (reduce_spatial_dim_conv): Conv2d(256, 256, kernel_size=(2, 2), stride=(2, 2))\n",
            "      (coarse_mask_fc1): Linear(in_features=12544, out_features=1024, bias=True)\n",
            "      (coarse_mask_fc2): Linear(in_features=1024, out_features=1024, bias=True)\n",
            "      (prediction): Linear(in_features=1024, out_features=1372, bias=True)\n",
            "    )\n",
            "    (mask_point_head): StandardPointHead(\n",
            "      (fc1): Conv1d(284, 256, kernel_size=(1,), stride=(1,))\n",
            "      (fc2): Conv1d(284, 256, kernel_size=(1,), stride=(1,))\n",
            "      (fc3): Conv1d(284, 256, kernel_size=(1,), stride=(1,))\n",
            "      (predictor): Conv1d(284, 28, kernel_size=(1,), stride=(1,))\n",
            "    )\n",
            "  )\n",
            ")\n",
            "\u001b[32m[04/10 09:58:06 d2.data.datasets.coco]: \u001b[0mLoaded 566 images in COCO format from ./drive/My Drive/pic566_28class/images566.json\n",
            "\u001b[32m[04/10 09:58:07 d2.data.build]: \u001b[0mRemoved 0 images with no usable annotations. 566 images left.\n",
            "\u001b[32m[04/10 09:58:07 d2.data.common]: \u001b[0mSerializing 566 elements to byte tensors and concatenating them all ...\n",
            "\u001b[32m[04/10 09:58:07 d2.data.common]: \u001b[0mSerialized dataset takes 1.53 MiB\n",
            "\u001b[32m[04/10 09:58:07 d2.data.detection_utils]: \u001b[0mTransformGens used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]\n",
            "\u001b[32m[04/10 09:58:07 d2.data.build]: \u001b[0mUsing training sampler TrainingSampler\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "'roi_heads.box_predictor.cls_score.weight' has shape (81, 1024) in the checkpoint but (29, 1024) in the model! Skipped.\n",
            "'roi_heads.box_predictor.cls_score.bias' has shape (81,) in the checkpoint but (29,) in the model! Skipped.\n",
            "'roi_heads.box_predictor.bbox_pred.weight' has shape (320, 1024) in the checkpoint but (112, 1024) in the model! Skipped.\n",
            "'roi_heads.box_predictor.bbox_pred.bias' has shape (320,) in the checkpoint but (112,) in the model! Skipped.\n",
            "'roi_heads.mask_coarse_head.prediction.weight' has shape (3920, 1024) in the checkpoint but (1372, 1024) in the model! Skipped.\n",
            "'roi_heads.mask_coarse_head.prediction.bias' has shape (3920,) in the checkpoint but (1372,) in the model! Skipped.\n",
            "'roi_heads.mask_point_head.fc1.weight' has shape (256, 336, 1) in the checkpoint but (256, 284, 1) in the model! Skipped.\n",
            "'roi_heads.mask_point_head.fc2.weight' has shape (256, 336, 1) in the checkpoint but (256, 284, 1) in the model! Skipped.\n",
            "'roi_heads.mask_point_head.fc3.weight' has shape (256, 336, 1) in the checkpoint but (256, 284, 1) in the model! Skipped.\n",
            "'roi_heads.mask_point_head.predictor.weight' has shape (80, 336, 1) in the checkpoint but (28, 284, 1) in the model! Skipped.\n",
            "'roi_heads.mask_point_head.predictor.bias' has shape (80,) in the checkpoint but (28,) in the model! Skipped.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "\u001b[32m[04/10 09:58:07 d2.engine.train_loop]: \u001b[0mStarting training from iteration 0\n",
            "\u001b[32m[04/10 09:58:28 d2.utils.events]: \u001b[0m eta: 0:13:22  iter: 19  total_loss: 4.968  loss_cls: 2.459  loss_box_reg: 0.887  loss_mask: 0.687  loss_mask_point: 0.662  loss_rpn_cls: 0.118  loss_rpn_loc: 0.070  time: 1.0331  data_time: 0.0421  lr: 0.000400  max_mem: 2672M\n",
            "\u001b[32m[04/10 09:58:49 d2.utils.events]: \u001b[0m eta: 0:13:18  iter: 39  total_loss: 3.076  loss_cls: 0.995  loss_box_reg: 0.903  loss_mask: 0.602  loss_mask_point: 0.515  loss_rpn_cls: 0.017  loss_rpn_loc: 0.076  time: 1.0486  data_time: 0.0083  lr: 0.000799  max_mem: 2685M\n",
            "\u001b[32m[04/10 09:59:10 d2.utils.events]: \u001b[0m eta: 0:12:59  iter: 59  total_loss: 2.424  loss_cls: 0.759  loss_box_reg: 0.841  loss_mask: 0.462  loss_mask_point: 0.328  loss_rpn_cls: 0.015  loss_rpn_loc: 0.052  time: 1.0529  data_time: 0.0084  lr: 0.001199  max_mem: 2685M\n",
            "\u001b[32m[04/10 09:59:32 d2.utils.events]: \u001b[0m eta: 0:12:46  iter: 79  total_loss: 1.911  loss_cls: 0.593  loss_box_reg: 0.636  loss_mask: 0.328  loss_mask_point: 0.281  loss_rpn_cls: 0.008  loss_rpn_loc: 0.064  time: 1.0570  data_time: 0.0083  lr: 0.001598  max_mem: 2698M\n",
            "\u001b[32m[04/10 09:59:54 d2.utils.events]: \u001b[0m eta: 0:12:30  iter: 99  total_loss: 1.802  loss_cls: 0.572  loss_box_reg: 0.533  loss_mask: 0.292  loss_mask_point: 0.259  loss_rpn_cls: 0.007  loss_rpn_loc: 0.052  time: 1.0626  data_time: 0.0088  lr: 0.001998  max_mem: 2698M\n",
            "\u001b[32m[04/10 10:00:14 d2.utils.events]: \u001b[0m eta: 0:12:08  iter: 119  total_loss: 1.509  loss_cls: 0.425  loss_box_reg: 0.450  loss_mask: 0.242  loss_mask_point: 0.280  loss_rpn_cls: 0.005  loss_rpn_loc: 0.062  time: 1.0592  data_time: 0.0091  lr: 0.002398  max_mem: 2698M\n",
            "\u001b[32m[04/10 10:00:36 d2.utils.events]: \u001b[0m eta: 0:11:43  iter: 139  total_loss: 1.383  loss_cls: 0.405  loss_box_reg: 0.460  loss_mask: 0.224  loss_mask_point: 0.235  loss_rpn_cls: 0.007  loss_rpn_loc: 0.045  time: 1.0586  data_time: 0.0082  lr: 0.002797  max_mem: 2698M\n",
            "\u001b[32m[04/10 10:00:57 d2.utils.events]: \u001b[0m eta: 0:11:22  iter: 159  total_loss: 1.294  loss_cls: 0.332  loss_box_reg: 0.422  loss_mask: 0.232  loss_mask_point: 0.242  loss_rpn_cls: 0.004  loss_rpn_loc: 0.055  time: 1.0575  data_time: 0.0083  lr: 0.003197  max_mem: 2698M\n",
            "\u001b[32m[04/10 10:01:18 d2.utils.events]: \u001b[0m eta: 0:11:03  iter: 179  total_loss: 1.255  loss_cls: 0.317  loss_box_reg: 0.415  loss_mask: 0.207  loss_mask_point: 0.237  loss_rpn_cls: 0.008  loss_rpn_loc: 0.065  time: 1.0601  data_time: 0.0081  lr: 0.003596  max_mem: 2698M\n",
            "\u001b[32m[04/10 10:01:39 d2.utils.events]: \u001b[0m eta: 0:10:40  iter: 199  total_loss: 1.280  loss_cls: 0.378  loss_box_reg: 0.408  loss_mask: 0.201  loss_mask_point: 0.233  loss_rpn_cls: 0.009  loss_rpn_loc: 0.045  time: 1.0603  data_time: 0.0081  lr: 0.003996  max_mem: 2698M\n",
            "\u001b[32m[04/10 10:02:01 d2.utils.events]: \u001b[0m eta: 0:10:20  iter: 219  total_loss: 1.125  loss_cls: 0.273  loss_box_reg: 0.413  loss_mask: 0.187  loss_mask_point: 0.218  loss_rpn_cls: 0.009  loss_rpn_loc: 0.071  time: 1.0602  data_time: 0.0097  lr: 0.004396  max_mem: 2698M\n",
            "\u001b[32m[04/10 10:02:22 d2.utils.events]: \u001b[0m eta: 0:09:58  iter: 239  total_loss: 1.078  loss_cls: 0.252  loss_box_reg: 0.384  loss_mask: 0.163  loss_mask_point: 0.210  loss_rpn_cls: 0.006  loss_rpn_loc: 0.049  time: 1.0592  data_time: 0.0085  lr: 0.004795  max_mem: 2698M\n",
            "\u001b[32m[04/10 10:02:43 d2.utils.events]: \u001b[0m eta: 0:09:36  iter: 259  total_loss: 1.073  loss_cls: 0.310  loss_box_reg: 0.386  loss_mask: 0.165  loss_mask_point: 0.189  loss_rpn_cls: 0.007  loss_rpn_loc: 0.056  time: 1.0602  data_time: 0.0079  lr: 0.005195  max_mem: 2701M\n",
            "\u001b[32m[04/10 10:03:04 d2.utils.events]: \u001b[0m eta: 0:09:15  iter: 279  total_loss: 1.024  loss_cls: 0.273  loss_box_reg: 0.352  loss_mask: 0.164  loss_mask_point: 0.182  loss_rpn_cls: 0.006  loss_rpn_loc: 0.066  time: 1.0592  data_time: 0.0086  lr: 0.005594  max_mem: 2701M\n",
            "\u001b[32m[04/10 10:03:25 d2.utils.events]: \u001b[0m eta: 0:08:53  iter: 299  total_loss: 1.005  loss_cls: 0.232  loss_box_reg: 0.352  loss_mask: 0.146  loss_mask_point: 0.187  loss_rpn_cls: 0.009  loss_rpn_loc: 0.057  time: 1.0595  data_time: 0.0088  lr: 0.005994  max_mem: 2701M\n",
            "\u001b[32m[04/10 10:03:47 d2.utils.events]: \u001b[0m eta: 0:08:32  iter: 319  total_loss: 1.090  loss_cls: 0.307  loss_box_reg: 0.353  loss_mask: 0.157  loss_mask_point: 0.197  loss_rpn_cls: 0.009  loss_rpn_loc: 0.041  time: 1.0597  data_time: 0.0082  lr: 0.006394  max_mem: 2702M\n",
            "\u001b[32m[04/10 10:04:08 d2.utils.events]: \u001b[0m eta: 0:08:10  iter: 339  total_loss: 0.942  loss_cls: 0.230  loss_box_reg: 0.337  loss_mask: 0.146  loss_mask_point: 0.176  loss_rpn_cls: 0.007  loss_rpn_loc: 0.059  time: 1.0588  data_time: 0.0085  lr: 0.006793  max_mem: 2702M\n",
            "\u001b[32m[04/10 10:04:28 d2.utils.events]: \u001b[0m eta: 0:07:49  iter: 359  total_loss: 0.991  loss_cls: 0.245  loss_box_reg: 0.326  loss_mask: 0.145  loss_mask_point: 0.179  loss_rpn_cls: 0.007  loss_rpn_loc: 0.068  time: 1.0578  data_time: 0.0094  lr: 0.007193  max_mem: 2702M\n",
            "\u001b[32m[04/10 10:04:50 d2.utils.events]: \u001b[0m eta: 0:07:28  iter: 379  total_loss: 0.947  loss_cls: 0.233  loss_box_reg: 0.358  loss_mask: 0.142  loss_mask_point: 0.166  loss_rpn_cls: 0.010  loss_rpn_loc: 0.059  time: 1.0580  data_time: 0.0092  lr: 0.007592  max_mem: 2705M\n",
            "\u001b[32m[04/10 10:05:11 d2.utils.events]: \u001b[0m eta: 0:07:06  iter: 399  total_loss: 0.929  loss_cls: 0.235  loss_box_reg: 0.354  loss_mask: 0.122  loss_mask_point: 0.158  loss_rpn_cls: 0.006  loss_rpn_loc: 0.052  time: 1.0581  data_time: 0.0086  lr: 0.007992  max_mem: 2705M\n",
            "\u001b[32m[04/10 10:05:32 d2.utils.events]: \u001b[0m eta: 0:06:45  iter: 419  total_loss: 0.982  loss_cls: 0.265  loss_box_reg: 0.330  loss_mask: 0.130  loss_mask_point: 0.167  loss_rpn_cls: 0.008  loss_rpn_loc: 0.062  time: 1.0590  data_time: 0.0086  lr: 0.008392  max_mem: 2706M\n",
            "\u001b[32m[04/10 10:05:54 d2.utils.events]: \u001b[0m eta: 0:06:24  iter: 439  total_loss: 0.969  loss_cls: 0.251  loss_box_reg: 0.326  loss_mask: 0.129  loss_mask_point: 0.158  loss_rpn_cls: 0.007  loss_rpn_loc: 0.073  time: 1.0588  data_time: 0.0090  lr: 0.008791  max_mem: 2706M\n",
            "\u001b[32m[04/10 10:06:14 d2.utils.events]: \u001b[0m eta: 0:06:02  iter: 459  total_loss: 0.866  loss_cls: 0.169  loss_box_reg: 0.326  loss_mask: 0.120  loss_mask_point: 0.163  loss_rpn_cls: 0.009  loss_rpn_loc: 0.061  time: 1.0575  data_time: 0.0086  lr: 0.009191  max_mem: 2706M\n",
            "\u001b[32m[04/10 10:06:35 d2.utils.events]: \u001b[0m eta: 0:05:41  iter: 479  total_loss: 0.933  loss_cls: 0.232  loss_box_reg: 0.342  loss_mask: 0.121  loss_mask_point: 0.160  loss_rpn_cls: 0.010  loss_rpn_loc: 0.076  time: 1.0575  data_time: 0.0082  lr: 0.009590  max_mem: 2706M\n",
            "\u001b[32m[04/10 10:06:57 d2.utils.events]: \u001b[0m eta: 0:05:20  iter: 499  total_loss: 0.865  loss_cls: 0.209  loss_box_reg: 0.313  loss_mask: 0.126  loss_mask_point: 0.158  loss_rpn_cls: 0.007  loss_rpn_loc: 0.052  time: 1.0587  data_time: 0.0083  lr: 0.009990  max_mem: 2706M\n",
            "\u001b[32m[04/10 10:07:19 d2.utils.events]: \u001b[0m eta: 0:04:59  iter: 519  total_loss: 1.010  loss_cls: 0.256  loss_box_reg: 0.381  loss_mask: 0.153  loss_mask_point: 0.157  loss_rpn_cls: 0.006  loss_rpn_loc: 0.066  time: 1.0602  data_time: 0.0089  lr: 0.010390  max_mem: 2706M\n",
            "\u001b[32m[04/10 10:07:41 d2.utils.events]: \u001b[0m eta: 0:04:38  iter: 539  total_loss: 0.952  loss_cls: 0.269  loss_box_reg: 0.338  loss_mask: 0.126  loss_mask_point: 0.154  loss_rpn_cls: 0.008  loss_rpn_loc: 0.050  time: 1.0609  data_time: 0.0082  lr: 0.010789  max_mem: 2706M\n",
            "\u001b[32m[04/10 10:08:02 d2.utils.events]: \u001b[0m eta: 0:04:17  iter: 559  total_loss: 0.904  loss_cls: 0.205  loss_box_reg: 0.329  loss_mask: 0.120  loss_mask_point: 0.160  loss_rpn_cls: 0.007  loss_rpn_loc: 0.063  time: 1.0617  data_time: 0.0079  lr: 0.011189  max_mem: 2706M\n",
            "\u001b[32m[04/10 10:08:23 d2.utils.events]: \u001b[0m eta: 0:03:55  iter: 579  total_loss: 0.925  loss_cls: 0.202  loss_box_reg: 0.338  loss_mask: 0.120  loss_mask_point: 0.140  loss_rpn_cls: 0.007  loss_rpn_loc: 0.054  time: 1.0614  data_time: 0.0084  lr: 0.011588  max_mem: 2706M\n",
            "\u001b[32m[04/10 10:08:45 d2.utils.events]: \u001b[0m eta: 0:03:34  iter: 599  total_loss: 0.888  loss_cls: 0.215  loss_box_reg: 0.326  loss_mask: 0.112  loss_mask_point: 0.151  loss_rpn_cls: 0.009  loss_rpn_loc: 0.064  time: 1.0619  data_time: 0.0093  lr: 0.011988  max_mem: 2706M\n",
            "\u001b[32m[04/10 10:09:06 d2.utils.events]: \u001b[0m eta: 0:03:13  iter: 619  total_loss: 0.884  loss_cls: 0.188  loss_box_reg: 0.318  loss_mask: 0.115  loss_mask_point: 0.150  loss_rpn_cls: 0.007  loss_rpn_loc: 0.061  time: 1.0616  data_time: 0.0085  lr: 0.012388  max_mem: 2706M\n",
            "\u001b[32m[04/10 10:09:28 d2.utils.events]: \u001b[0m eta: 0:02:51  iter: 639  total_loss: 0.911  loss_cls: 0.235  loss_box_reg: 0.334  loss_mask: 0.116  loss_mask_point: 0.161  loss_rpn_cls: 0.009  loss_rpn_loc: 0.066  time: 1.0619  data_time: 0.0085  lr: 0.012787  max_mem: 2706M\n",
            "\u001b[32m[04/10 10:09:49 d2.utils.events]: \u001b[0m eta: 0:02:30  iter: 659  total_loss: 0.854  loss_cls: 0.218  loss_box_reg: 0.314  loss_mask: 0.118  loss_mask_point: 0.142  loss_rpn_cls: 0.005  loss_rpn_loc: 0.063  time: 1.0624  data_time: 0.0086  lr: 0.013187  max_mem: 2706M\n",
            "\u001b[32m[04/10 10:10:10 d2.utils.events]: \u001b[0m eta: 0:02:09  iter: 679  total_loss: 0.850  loss_cls: 0.190  loss_box_reg: 0.317  loss_mask: 0.105  loss_mask_point: 0.141  loss_rpn_cls: 0.008  loss_rpn_loc: 0.062  time: 1.0623  data_time: 0.0081  lr: 0.013586  max_mem: 2706M\n",
            "\u001b[32m[04/10 10:10:32 d2.utils.events]: \u001b[0m eta: 0:01:47  iter: 699  total_loss: 0.862  loss_cls: 0.196  loss_box_reg: 0.337  loss_mask: 0.100  loss_mask_point: 0.144  loss_rpn_cls: 0.006  loss_rpn_loc: 0.061  time: 1.0631  data_time: 0.0092  lr: 0.013986  max_mem: 2706M\n",
            "\u001b[32m[04/10 10:10:54 d2.utils.events]: \u001b[0m eta: 0:01:26  iter: 719  total_loss: 0.890  loss_cls: 0.212  loss_box_reg: 0.312  loss_mask: 0.109  loss_mask_point: 0.147  loss_rpn_cls: 0.012  loss_rpn_loc: 0.057  time: 1.0635  data_time: 0.0100  lr: 0.014386  max_mem: 2706M\n",
            "\u001b[32m[04/10 10:11:15 d2.utils.events]: \u001b[0m eta: 0:01:05  iter: 739  total_loss: 0.884  loss_cls: 0.203  loss_box_reg: 0.349  loss_mask: 0.101  loss_mask_point: 0.146  loss_rpn_cls: 0.009  loss_rpn_loc: 0.065  time: 1.0629  data_time: 0.0083  lr: 0.014785  max_mem: 2706M\n",
            "\u001b[32m[04/10 10:11:37 d2.utils.events]: \u001b[0m eta: 0:00:43  iter: 759  total_loss: 0.797  loss_cls: 0.174  loss_box_reg: 0.334  loss_mask: 0.089  loss_mask_point: 0.138  loss_rpn_cls: 0.007  loss_rpn_loc: 0.056  time: 1.0641  data_time: 0.0081  lr: 0.015185  max_mem: 2706M\n",
            "\u001b[32m[04/10 10:11:58 d2.utils.events]: \u001b[0m eta: 0:00:22  iter: 779  total_loss: 0.932  loss_cls: 0.236  loss_box_reg: 0.342  loss_mask: 0.095  loss_mask_point: 0.150  loss_rpn_cls: 0.013  loss_rpn_loc: 0.083  time: 1.0641  data_time: 0.0090  lr: 0.015584  max_mem: 2706M\n",
            "\u001b[32m[04/10 10:12:21 d2.utils.events]: \u001b[0m eta: 0:00:01  iter: 799  total_loss: 0.928  loss_cls: 0.228  loss_box_reg: 0.350  loss_mask: 0.106  loss_mask_point: 0.154  loss_rpn_cls: 0.012  loss_rpn_loc: 0.070  time: 1.0645  data_time: 0.0111  lr: 0.015984  max_mem: 2706M\n",
            "\u001b[32m[04/10 10:12:22 d2.engine.hooks]: \u001b[0mOverall training speed: 797 iterations in 0:14:09 (1.0659 s / it)\n",
            "\u001b[32m[04/10 10:12:22 d2.engine.hooks]: \u001b[0mTotal training time: 0:14:12 (0:00:03 on hooks)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0e4vdDIOXyxF",
        "colab_type": "text"
      },
      "source": [
        "Now, we perform inference with the trained model on the fruits_nuts dataset. First, let's create a predictor using the model we just trained:\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YM6RCjvB9vU4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Look at training curves in tensorboard:\n",
        "%load_ext tensorboard\n",
        "%tensorboard --logdir output"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ya5nEuMELeq8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, \"model_final.pth\")\n",
        "cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5   # set the testing threshold for this model\n",
        "cfg.DATASETS.TEST = (\"wz\", )\n",
        "predictor = DefaultPredictor(cfg)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qWq1XHfDWiXO",
        "colab_type": "text"
      },
      "source": [
        "Then, we randomly select several samples to visualize the prediction results."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "U5LhISJqWXgM",
        "colab_type": "code",
        "outputId": "9d7e451f-df25-4e4e-81b9-afc4b27efec2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "from detectron2.utils.visualizer import ColorMode\n",
        "\n",
        "for d in random.sample(wanzhengdataset_dicts, 1):    \n",
        "    im = cv2.imread(d[\"file_name\"])\n",
        "    outputs = predictor(im)\n",
        "    v = Visualizer(im[:, :, ::-1],\n",
        "                   metadata=wanzheng_metadata, \n",
        "                   scale=0.8, \n",
        "                   instance_mode=ColorMode.IMAGE_BW   # remove the colors of unsegmented pixels用于实例化可视化的不同颜色模式  IMAGE_BW：与IMAGE相同，但将所有不带遮罩的区域转换为灰度。仅适用于按实例绘制蒙版预测\n",
        "    )\n",
        "    v = v.draw_instance_predictions(outputs[\"instances\"].to(\"cpu\"))\n",
        "    cv2_imshow(v.get_image()[:, :, ::-1])\n",
        "    filepath=\"/content/bihua/\"+d[\"file_name\"]+\"/\"\n",
        "    cv2.imwrite(filepath,v.get_image()[:, :, ::-1])\n",
        "\n",
        "    #如何输出单独的mask\n",
        "    masks= np.asarray(outputs[\"instances\"].to(\"cpu\").pred_masks) #[n,256,256]n为笔画数\n",
        "    count=0\n",
        "    for mask in masks:\n",
        "      mask=mask.astype(\"uint8\") #mask从[false,flase]到[00001100]\n",
        "      mask=mask*255       #变成二值图\n",
        "      cv2_imshow(mask)\n",
        "      #保存笔画\n",
        "      count=count+1\n",
        "      filepath=\"/content/bihua/\"+d[\"file_name\"]+\"/\"+str(count)+\".jpg\"\n",
        "      cv2.imwrite(filepath, mask)"
      ],
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nQNZFHU7/D17hGCC3YoKVAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=204x204 at 0x7F91201DD940>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAAAAAB5Gfe6AAACKUlEQVR4nO3by1LkMAwFUPf8/z+H\nzVQK0u6QhyPJ1DkLtpZuZDuBojUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n/qYlu4CeV8wya+9B6x0XU9CPZ18rg3/xSy6ltkJMAJuHXimBuHn82XWZfRBZSMkIYssoeBhGV1Eu\ngvAaqu2DhApqRZCyfqUIEl6Eti3nvhWkBFApgaz52zSdtw3yVi4SQc4WaK3M90HmEbztOaWW3Duo\nwDZIfg/JH4LsF7H0CPIOwf+yn0B6ANm3QfYDaC15F1QIIPU2qBHA++CH1VUkgJa2EeoEkDQF+bfA\n6q3fkAuhUADvIv6GVCmAzsg/n0ChM6D1+324wkoT0PfwENSagA/dPllk/Qlozw5BrQlYWnsFnwTV\nJuDV+s0+diMWC+D17efGQwnU2gKruMOwaACfnvf4cottgdWHTsfvg6oT0KKGoOoEtKghKDwBO70O\nrLp0ABERFN4Cre30OWwjFJ+AvU7HlF4+gL1nPaL4+gHsTvv98icI4Jf9frODGQL49cS708QUATwZ\nwSQBHLj2LnYySwDHLv4L3UwTwOFXn5MdBQaw3F3rxNvf8aWiAlhGrHX6/ffAinH/NjdkpUufALsr\nhwUwaKHLH0Gf1g8KYNwydz4De1XMcwusrkfQa7b47wN6xj6zCSfg6gz0W50ygCsJ5B6C452LYKfL\nWQM4kcC0LQIAAAAAAAAAAAA3fQEgbUlQrQFq2QAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<PIL.Image.Image image mode=L size=256x256 at 0x7F912017E748>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAAAAAB5Gfe6AAACZElEQVR4nO3dy27bQBAEwFWQ//9l\n5uDEcWSIj+UuNj2qOhgwZBOcVg8pwge3BgAAAAAAAAAAAEBNj6FH24YfcbofIw+2fX7JMTSAD1tU\nBBMCyIpgSgBJezApgJwSzAogpgTzAggpwcQAMghg9QmsJoDVJ7CaAFafwGoCWH0Cqwlg9QmsJoCB\nx4p4+HmmAatPYLWBAURugAbMDCDiTyQTA4iYf2AAmZeAiQ3IKMC4AJ4LEDK/u8CoAFILMKsBMfNb\ngUEBPG1ATgE0YEwAuQWY0oCk+ccEEPopuLU2pQFRBRgSQHIBJjQgqwAjAoguwIAAgm+BrY1fgbT5\n7weQvQDDGxBXgNsBpBdgcAPyCnA3gH8LEDi/x+F7AeQXQANuBVCgALcCqDC/FbgRQIkCaEB/ADUK\n0B9A/EPAb4NWILYA3QEUWYBBDQievzeAKleAMQ1ILkBnAHUK0BfAtvttltsr8HhkJ9Czv1/mjV7/\n1lpXA5Lf7+88DF3+jUpXwHa3AY/8q8DlAL6+4+nDt3Y9gPTGf3NnBSoU4GoA1RbgagD15vc54FIA\nBQtwKYCK8/euQJn5rwRQ6iHw0/kAyn0E+tC1AoUKcD6AmgtwPoCq858NoOz8JwOoO//li2C1+c8F\nUPQO2Fo7F0DhBbi6AvXmPxPA3wIUnP9EALXnPw6g+PyHAVSf//xFsOj8R3P9KUDV8Y8aUH/+/QDe\nYP7dAN5h/r0A3mL+nem2ox+o4eg2WH3+1wNuu6/W8aoB7zL/qxkD/2dWp5+vXniP8QEAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAA/mO/APLYRtA2UJGLAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<PIL.Image.Image image mode=L size=256x256 at 0x7F91BC90D320>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAAAAAB5Gfe6AAAA/ElEQVR4nO3WQQ6DIBAFUJr0/le2\ni3ZjQqwZZAaS93btQud/QG0NAAAAAAAAAAAAAAAAAAAAALb2qh4g6jj/DOfYsYCj+28wyW4F9MN/\nhbK8g4NUuAofts0OuJU+kGaLHTBl6X+WL2Bm+NYWPgKR4JEwCxYQXvNQlsUKGNjwu38HjJz1kRD1\nBYw95Ybnry1gKPwzoxcVULzsk651x+Br/flxMwtYYMPnXbcjmH/yhEt/CmeszsJHIGe03Ifg/wrS\n30rJN7xooOiFnH7bTgX1X6MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nADDHB4MTFSGfe6UkAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<PIL.Image.Image image mode=L size=256x256 at 0x7F911C5E41D0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAAAAAB5Gfe6AAAAwElEQVR4nO3UQQoCMQwF0Aje/8p1\nMeCAulDTNlHe2xQKA/lJMxEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMUu1QUkjOPI\nRfjBBozHi1SGa+bjzZ6Sz9C1AeMc7JLcdy1X4MPIf7UCa8f9QqMGbM8eEU0aUBP9UP0PSGWfUXxx\nA77JP7fkFivwhmWDar0CO4pr+AL2zqRPA6rfIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAX\nN97gDCVnTP+6AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<PIL.Image.Image image mode=L size=256x256 at 0x7F91BC89F908>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAAAAAB5Gfe6AAABKklEQVR4nO3XQWrDMBAF0HHp/a/s\nLrpJk1DMKJLGw3srEzDW/5ZkJQIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMo7dg8g5Xz+IR/jhgW8\npI+IfJC7FfA+fURko3wnB7LDP+HzblPAlPRxkwJmhY+oXMAZEXFMDf/7hJIysftsgrNf+h+1Crga\n/YMro8oSuBbocbQfOg1uL+BS8rejfL7zfnvAhezz38/X9CeMWDA/SxewYn2WLmCFcgWs3pWrnAOO\nh6tzZQn7C3hNu3QS7Cxg+xkkouAesFqfApLzqU0B2fXUpoCsLgWkN9QuBaQ1KSD/Re1RwMCJokcB\nA1oUMHKkbFHAiA4FlPhPAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQ9gNo8RJYem0X\n5AAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<PIL.Image.Image image mode=L size=256x256 at 0x7F911D68E438>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAAAAAB5Gfe6AAAA90lEQVR4nO3WsQ3DQAwDQCf77+y0\nfiBFKpJA7hbgW6AEXxcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/vbj/gq1co5/z6VOoP3pXU\ne6cNnQEM7UNrADNSAxja+pMGtB/QFhvA6g5oQCxptAK1Bqz8CAQHsFkBNyCYNVkBDUiGHRUYuYIa\n0H5AW3YAg2dQA7JxzwpsXEENCOfNXQENSAc+KjBxBDQgnjh2BTQgH7lVAQ0oZE5VQAPaD2irDGBp\nBzoNGJqAFejE7lRAA0q5MxWoNWBlAr0VWJkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAw6QP3\nEgldvjdCrgAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<PIL.Image.Image image mode=L size=256x256 at 0x7F911D69DEB8>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAAAAAB5Gfe6AAABpklEQVR4nO3dMU4jARBFwTH3v7NJ\nMWm39NRQlRAx+vvUBgux4nkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAODPetcDJr7mj3ifLrAQ\n4Hme990EOwEOvwzmAd4fH87ZuoCzBfYCHC2wGOBmgc0AJwusBrhYYDfAQfMAr4UVoeULuPca8BJY\nft65E3AB9YCaAPWA2kKA228EXEA9oCZAPaAmwPLzzn1LcAH1gJoA9YCaAPWAmgD1gJoA9YCaAPWA\nmgD1gJoAu4879+MAFyBAPaC28rvCl7mAekBNgHpATYB6QE2AekBNgHpATYB6QE2AekBNgHpATYB6\nQE2AekBt7X+PX+UC6gE1AeoBNQHqATUB6gG1cYDj74NcgAD1gNpugHu/JOYCBBh+/vXvgi5gGOD8\nAbgAAeoBNQFGn33/a6ALEKAeUBOgHlBbDXDwxwEuQIB6QE2AekBNgHpATYDFZ118H+QCBBh99smj\n/+QC9h518xyGAW7+o3/yEqgH1KYBzr8G9i7gaAovgekDXr8+XuMvTS0953iGocN/cxUAAAAAAADg\nf/gG+wcX5o1b9zsAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<PIL.Image.Image image mode=L size=256x256 at 0x7F911D68E438>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAAAAAB5Gfe6AAADVklEQVR4nO2dS3LbQAwFR6nc/8rM\nwuVIFiVHqQSvH8XuTezVAC1gfqSctURERERERERERERERERERETkvbnQAXxh+/gnGdSP4FgvswXH\nqhSwtpyCTgHBIqicA24Yj6+1Aj4Zr4R2AeMG6gVMG+gSAMxIXQIAygTkS6BMQJ42AfESaBMQRwF0\nAPeke2BQwH/awQwbGRTQdc56Rl0LpFEAHcCOcOf0Cbhj2ke9gGlGBCRvdf8VK4AOgGZGwIF6wAqg\nA6BRAB3AnsvTXyYoFJBlRsAxTsJrLStgTsBRtgJTAo6S/5SA7TDTwIiAoyS/1txZ4DAOhu4DDpN/\n+z5gXqRzAB0AjQLoAPZk91B9AsJ7yD4BPhnKGigUkEUBdADfMz8jlguYRwF0AA+4PPxxiEYBURoF\nRPeCjQKiKIAOgEYBdAA0CqADoFEAHQCNAugAHhC9E2sUcCWgolGAh6EkCqADoFEAHQBNoYCzPx0O\nUy0gsSWsFpAgJ+Dl1n7Xx+Olr44FW2BbW/CvxL1KUMCrJbA9+GmOaAX8bRckuibZmS8auPncT3of\nEEUBwbEqF8JoBTQaAFqgazPwMz9kVx04CdIB0CiADoAmLqBqCVjAKnDZutYBogW+zz97FgIE/Ckr\nvzKTpakdP7i2QCS201dAnYD0Mlkn4I3+rO4xUAAdAI0C6AB2nH4nmH0yViggDCmg4mqguQLe/ixQ\ncRCrq4DTnwXSKIAOgEYBdAA0bQLCl+J9AuIogA6ARgF0AF/JHxDLBNwQOir1CgihADoAmloBqduS\nWgEpugQA16RdAgC6BPifr/8mpqJVQAwF0AE8JjcZlArIAXxj5DnE09IiAczD4ooHlGvdpR+M6vRz\nQKWAZFlWCkjSIgB7XaZFAEbHMgi+LlWxDFJL4Fq2QIUAsgAaBLDvS/IC4PdFcQF3+ccnZVoAnT8t\ngH9fmhVwn//ZrsUL8q/6vgCyKwUFVORPT4I3QKcS7DDU8flj4+6WP+yDYFqgJ39GQFH+xND73R95\nK5OvgK78C+4E4Uu59PBN7U+M37L6X8nOAX35h/+uMDf2U4JB4Jc/D8EOQyX5Qy3Qkv2CKqAo/8hG\naPuScFP2K98CZemLiIiIiIiIiIiIiIiIiIiIiIiIiIjIu/ILdaJOamAB8OIAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<PIL.Image.Image image mode=L size=256x256 at 0x7F911D69DEB8>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hLH2qPSMgOSk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# look at the outputs. See https://detectron2.readthedocs.io/tutorials/models.html#model-output-format for specification\n",
        "outputs[\"instances\"].pred_classes\n",
        "outputs[\"instances\"].pred_boxes\n",
        "outputs[\"instances\"]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t_bo0cypwllj",
        "colab_type": "code",
        "outputId": "a59ab3d3-0cc7-4c54-d3fd-219f98528d83",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 55
        }
      },
      "source": [
        "wanzheng_metadata"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Metadata(evaluator_type='coco', image_root='./drive/My Drive/pic566_28class/images', json_file='./drive/My Drive/pic566_28class/images566.json', name='wz', thing_classes=['piezhe', 'heng', 'hengzhewangou', 'pie', 'na', 'shuwangou', 'henggou', 'shugou', 'hengzhegou', 'hengzhezhezhegou', 'hengpie', 'shu', 'shuzhezhegou', 'dian', 'wangou', 'ti', 'shuti', 'shuzhe', 'wogou', 'hengzhe', 'xiegou', 'hengzhezhepie', 'hengzhewan', 'piedian', 'shuzhepie', 'hengxiegou', 'hengzheti', 'shuwan'], thing_dataset_id_to_contiguous_id={1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 12: 11, 13: 12, 14: 13, 15: 14, 16: 15, 17: 16, 18: 17, 19: 18, 20: 19, 21: 20, 22: 21, 23: 22, 24: 23, 25: 24, 26: 25, 27: 26, 28: 27})"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rvn2tueICLiE",
        "colab_type": "text"
      },
      "source": [
        "We can also evaluate its performance using AP metric implemented in COCO API. This gives an AP of ~70%. Not bad!"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v4Y_TQ6YCOWT",
        "colab_type": "code",
        "outputId": "d81020aa-1eb6-43ef-88a5-97b0a2e16c01",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "from detectron2.evaluation import COCOEvaluator, inference_on_dataset\n",
        "from detectron2.data import build_detection_test_loader\n",
        "evaluator = COCOEvaluator(\"wz\", cfg, False, output_dir=\"./output/\")\n",
        "val_loader = build_detection_test_loader(cfg, \"wz\")\n",
        "inference_on_dataset(trainer.model, val_loader, evaluator)\n",
        "# another equivalent way is to use trainer.test"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[32m[04/07 17:16:09 d2.data.datasets.coco]: \u001b[0mLoaded 566 images in COCO format from ./drive/My Drive/pic566_28class/images566.json\n",
            "\u001b[32m[04/07 17:16:09 d2.data.common]: \u001b[0mSerializing 566 elements to byte tensors and concatenating them all ...\n",
            "\u001b[32m[04/07 17:16:09 d2.data.common]: \u001b[0mSerialized dataset takes 1.53 MiB\n",
            "\u001b[32m[04/07 17:16:09 d2.evaluation.evaluator]: \u001b[0mStart inference on 566 images\n",
            "\u001b[32m[04/07 17:16:13 d2.evaluation.evaluator]: \u001b[0mInference done 11/566. 0.3023 s / img. ETA=0:02:49\n",
            "\u001b[32m[04/07 17:16:18 d2.evaluation.evaluator]: \u001b[0mInference done 28/566. 0.2937 s / img. ETA=0:02:40\n",
            "\u001b[32m[04/07 17:16:23 d2.evaluation.evaluator]: \u001b[0mInference done 45/566. 0.2978 s / img. ETA=0:02:37\n",
            "\u001b[32m[04/07 17:16:28 d2.evaluation.evaluator]: \u001b[0mInference done 61/566. 0.3017 s / img. ETA=0:02:35\n",
            "\u001b[32m[04/07 17:16:33 d2.evaluation.evaluator]: \u001b[0mInference done 77/566. 0.3030 s / img. ETA=0:02:30\n",
            "\u001b[32m[04/07 17:16:38 d2.evaluation.evaluator]: \u001b[0mInference done 93/566. 0.3052 s / img. ETA=0:02:27\n",
            "\u001b[32m[04/07 17:16:44 d2.evaluation.evaluator]: \u001b[0mInference done 110/566. 0.3045 s / img. ETA=0:02:21\n",
            "\u001b[32m[04/07 17:16:49 d2.evaluation.evaluator]: \u001b[0mInference done 127/566. 0.3041 s / img. ETA=0:02:16\n",
            "\u001b[32m[04/07 17:16:54 d2.evaluation.evaluator]: \u001b[0mInference done 143/566. 0.3044 s / img. ETA=0:02:11\n",
            "\u001b[32m[04/07 17:16:59 d2.evaluation.evaluator]: \u001b[0mInference done 160/566. 0.3039 s / img. ETA=0:02:05\n",
            "\u001b[32m[04/07 17:17:04 d2.evaluation.evaluator]: \u001b[0mInference done 175/566. 0.3066 s / img. ETA=0:02:02\n",
            "\u001b[32m[04/07 17:17:09 d2.evaluation.evaluator]: \u001b[0mInference done 190/566. 0.3085 s / img. ETA=0:01:58\n",
            "\u001b[32m[04/07 17:17:14 d2.evaluation.evaluator]: \u001b[0mInference done 205/566. 0.3098 s / img. ETA=0:01:54\n",
            "\u001b[32m[04/07 17:17:19 d2.evaluation.evaluator]: \u001b[0mInference done 221/566. 0.3102 s / img. ETA=0:01:49\n",
            "\u001b[32m[04/07 17:17:25 d2.evaluation.evaluator]: \u001b[0mInference done 237/566. 0.3103 s / img. ETA=0:01:44\n",
            "\u001b[32m[04/07 17:17:30 d2.evaluation.evaluator]: \u001b[0mInference done 254/566. 0.3098 s / img. ETA=0:01:38\n",
            "\u001b[32m[04/07 17:17:35 d2.evaluation.evaluator]: \u001b[0mInference done 271/566. 0.3094 s / img. ETA=0:01:33\n",
            "\u001b[32m[04/07 17:17:40 d2.evaluation.evaluator]: \u001b[0mInference done 288/566. 0.3085 s / img. ETA=0:01:27\n",
            "\u001b[32m[04/07 17:17:45 d2.evaluation.evaluator]: \u001b[0mInference done 305/566. 0.3075 s / img. ETA=0:01:21\n",
            "\u001b[32m[04/07 17:17:50 d2.evaluation.evaluator]: \u001b[0mInference done 321/566. 0.3078 s / img. ETA=0:01:16\n",
            "\u001b[32m[04/07 17:17:55 d2.evaluation.evaluator]: \u001b[0mInference done 337/566. 0.3078 s / img. ETA=0:01:11\n",
            "\u001b[32m[04/07 17:18:00 d2.evaluation.evaluator]: \u001b[0mInference done 353/566. 0.3081 s / img. ETA=0:01:06\n",
            "\u001b[32m[04/07 17:18:06 d2.evaluation.evaluator]: \u001b[0mInference done 369/566. 0.3086 s / img. ETA=0:01:02\n",
            "\u001b[32m[04/07 17:18:11 d2.evaluation.evaluator]: \u001b[0mInference done 385/566. 0.3086 s / img. ETA=0:00:56\n",
            "\u001b[32m[04/07 17:18:16 d2.evaluation.evaluator]: \u001b[0mInference done 401/566. 0.3086 s / img. ETA=0:00:51\n",
            "\u001b[32m[04/07 17:18:21 d2.evaluation.evaluator]: \u001b[0mInference done 418/566. 0.3083 s / img. ETA=0:00:46\n",
            "\u001b[32m[04/07 17:18:26 d2.evaluation.evaluator]: \u001b[0mInference done 435/566. 0.3076 s / img. ETA=0:00:41\n",
            "\u001b[32m[04/07 17:18:31 d2.evaluation.evaluator]: \u001b[0mInference done 450/566. 0.3082 s / img. ETA=0:00:36\n",
            "\u001b[32m[04/07 17:18:36 d2.evaluation.evaluator]: \u001b[0mInference done 465/566. 0.3090 s / img. ETA=0:00:31\n",
            "\u001b[32m[04/07 17:18:41 d2.evaluation.evaluator]: \u001b[0mInference done 481/566. 0.3094 s / img. ETA=0:00:26\n",
            "\u001b[32m[04/07 17:18:47 d2.evaluation.evaluator]: \u001b[0mInference done 497/566. 0.3099 s / img. ETA=0:00:21\n",
            "\u001b[32m[04/07 17:18:52 d2.evaluation.evaluator]: \u001b[0mInference done 513/566. 0.3103 s / img. ETA=0:00:16\n",
            "\u001b[32m[04/07 17:18:57 d2.evaluation.evaluator]: \u001b[0mInference done 529/566. 0.3104 s / img. ETA=0:00:11\n",
            "\u001b[32m[04/07 17:19:02 d2.evaluation.evaluator]: \u001b[0mInference done 545/566. 0.3107 s / img. ETA=0:00:06\n",
            "\u001b[32m[04/07 17:19:07 d2.evaluation.evaluator]: \u001b[0mInference done 561/566. 0.3107 s / img. ETA=0:00:01\n",
            "\u001b[32m[04/07 17:19:09 d2.evaluation.evaluator]: \u001b[0mTotal inference time: 0:02:57.964124 (0.317227 s / img per device, on 1 devices)\n",
            "\u001b[32m[04/07 17:19:09 d2.evaluation.evaluator]: \u001b[0mTotal inference pure compute time: 0:02:54 (0.310668 s / img per device, on 1 devices)\n",
            "\u001b[32m[04/07 17:19:09 d2.evaluation.coco_evaluation]: \u001b[0mPreparing results for COCO format ...\n",
            "\u001b[32m[04/07 17:19:09 d2.evaluation.coco_evaluation]: \u001b[0mSaving results to ./output/coco_instances_results.json\n",
            "\u001b[32m[04/07 17:19:09 d2.evaluation.coco_evaluation]: \u001b[0mEvaluating predictions ...\n",
            "Loading and preparing results...\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-25-1fa900de22ea>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mevaluator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCOCOEvaluator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"wz\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcfg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_dir\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"./output/\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mval_loader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuild_detection_test_loader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcfg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"wz\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0minference_on_dataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrainer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_loader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;31m# another equivalent way is to use trainer.test\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/detectron2/evaluation/evaluator.py\u001b[0m in \u001b[0;36minference_on_dataset\u001b[0;34m(model, data_loader, evaluator)\u001b[0m\n\u001b[1;32m    156\u001b[0m     )\n\u001b[1;32m    157\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 158\u001b[0;31m     \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mevaluator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    159\u001b[0m     \u001b[0;31m# An evaluator may return None when not in main process.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    160\u001b[0m     \u001b[0;31m# Replace it by an empty dict instead to make it easier for downstream code to handle\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/detectron2/evaluation/coco_evaluation.py\u001b[0m in \u001b[0;36mevaluate\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    140\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_eval_box_proposals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpredictions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m\"instances\"\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpredictions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 142\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_eval_predictions\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredictions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    143\u001b[0m         \u001b[0;31m# Copy so the caller can do whatever with results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    144\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdeepcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_results\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/detectron2/evaluation/coco_evaluation.py\u001b[0m in \u001b[0;36m_eval_predictions\u001b[0;34m(self, tasks, predictions)\u001b[0m\n\u001b[1;32m    183\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_coco_api\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcoco_results\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtask\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkpt_oks_sigmas\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_kpt_oks_sigmas\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m                 )\n\u001b[0;32m--> 185\u001b[0;31m                 \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcoco_results\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    186\u001b[0m                 \u001b[0;32melse\u001b[0m \u001b[0;32mNone\u001b[0m  \u001b[0;31m# cocoapi does not handle empty results very well\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    187\u001b[0m             )\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/detectron2/evaluation/coco_evaluation.py\u001b[0m in \u001b[0;36m_evaluate_predictions_on_coco\u001b[0;34m(coco_gt, coco_results, iou_type, kpt_oks_sigmas)\u001b[0m\n\u001b[1;32m    488\u001b[0m             \u001b[0mc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"bbox\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    489\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 490\u001b[0;31m     \u001b[0mcoco_dt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcoco_gt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloadRes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcoco_results\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    491\u001b[0m     \u001b[0mcoco_eval\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCOCOeval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcoco_gt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcoco_dt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miou_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    492\u001b[0m     \u001b[0;31m# Use the COCO default keypoint OKS sigmas unless overrides are specified\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pycocotools/coco.py\u001b[0m in \u001b[0;36mloadRes\u001b[0;34m(self, resFile)\u001b[0m\n\u001b[1;32m    306\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Loading and preparing results...'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    307\u001b[0m         \u001b[0mtic\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 308\u001b[0;31m         \u001b[0;32mif\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresFile\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mstr\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresFile\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0municode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    309\u001b[0m             \u001b[0manns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresFile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresFile\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'unicode' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wZ6lYrCqLLLW",
        "colab_type": "text"
      },
      "source": [
        "## Benchmark inference speed"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PxRHYcAC_Z0f",
        "colab_type": "code",
        "outputId": "3ad8069b-efd1-4d61-c5f5-e290e562cfdb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "import time\n",
        "times = []\n",
        "for i in range(20):\n",
        "    start_time = time.time()\n",
        "    outputs = predictor(im)\n",
        "    delta = time.time() - start_time\n",
        "    times.append(delta)\n",
        "mean_delta = np.array(times).mean()\n",
        "fps = 1 / mean_delta\n",
        "print(\"Average(sec):{:.2f},fps:{:.2f}\".format(mean_delta, fps))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Average(sec):0.30,fps:3.31\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WFMOqBbWEh5v",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}